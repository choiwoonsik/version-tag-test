name: production-release

on:
  workflow_dispatch:
    inputs:
      version:
        description: 배포 Tag 버전 업
        required: true
        default: patch
        type: choice
        options:
          - minor
          - patch

jobs:
  init:
    name: 기존 태그 버전 확인
    runs-on: ubuntu-latest

    steps:
      - name: GITHUB ACTIONS 체크아웃
        uses: actions/checkout@v2

      - name: TAG 버전 업 타입 확인
        run: |
          echo "배포 태그 버전 업 타입: ${{ inputs.version }}"

      - name: 최신 태그 버전 추출 및 환경변수 설정
        id: tag
        run: |
          git fetch
          echo "LATEST TAG VERSION: $(git tag --list --sort=-v:refname | head -1 | sed 's/v//g')"
          echo "GIT_TAG=`echo $(git tag --list --sort=-v:refname | head -1 | sed 's/v//g')`" >> $GITHUB_ENV
          echo ${{ env.GIT_TAG }}

    outputs:
      current_tag: ${{ env.GIT_TAG }}

  calculate:
    needs: init
    name: 다음 태그 버전 계산
    runs-on: ubuntu-latest

    env:
      TAG: ${{ needs.init.outputs.current_tag }}

    steps:
      - name: MAJOR/MINOR/PATCH 버전 값 추출
        run: |
          CUR_MAJOR_NUMBER=$(${{ env.TAG }} | awk -F '.' '{ print $1 }')
          CUR_MINOR_NUMBER=`${{ env.TAG }} | awk -F '.' '{ print $2 }'`
          CUR_PATCH_NUMBER=`${{ env.TAG }} | awk -F '.' '{ print $3 }'`
          echo $CUR_MAJOR_NUMBER
          echo $CUR_MINOR_NUMBER
          echo $CUR_PATCH_NUMBER
          echo NEXT_MAJOR_NUMBER=$CUR_MAJOR_NUMBER >> $GITHUB_ENV
          echo NEXT_MINOR_NUMBER=$CUR_MINOR_NUMBER >> $GITHUB_ENV
          echo NEXT_PATCH_NUMBER=$CUR_PATCH_NUMBER >> $GITHUB_ENV

      - name: 버전 확인
        run: |
          echo ${{ env.NEXT_MAJOR_NUMBER }}
          echo ${{ env.NEXT_MINOR_NUMBER }}
          echo ${{ env.NEXT_PATCH_NUMBER }}

      - name: MINOR - 다음 버전 확인
        if: ${{ inputs.version }} == 'minor'
        run: |
          CUR_MINOR_NUMBER=${{ env.NEXT_MINOR_NUMBER }}
          NEXT_MINOR_NUMBER=`expr $CUR_MINOR_NUMBER + 1`
          echo "NEXT_MINOR_NUMBER=$NEXT_MINOR_NUMBER" >> $GITHUB_ENV
          echo "마이너 버전 업: $CUR_MINOR_NUMBER ---> ${{ env.NEXT_MINOR_NUMBER }}"

      - name: PATCH - 다음 버전 확인
        if: ${{ inputs.version }} == 'patch'
        run: |
          CUR_PATCH_NUMBER=${{ env.NEXT_PATCH_NUMBER }}
          NEXT_PATCH_NUMBER=`expr CUR_PATCH_NUMBER + 1`
          echo "NEXT_PATCH_NUMBER=NEXT_PATCH_NUMBER" >> $GITHUB_ENV
          echo "패치 버전 업: CUR_PATCH_NUMBER ---> ${{ env.NEXT_PATCH_NUMBER }}"

    outputs:
      next_major: ${{ env.NEXT_MAJOR_NUMBER }}
      next_minor: ${{ env.NEXT_MINOR_NUMBER }}
      next_patch: ${{ env.NEXT_PATCH_NUMBER }}
      tag: ${{ env.TAG }}

  build:
    name: 새 태그 버전 배포
    runs-on: ubuntu-latest
    needs: calculate
    env:
      NEXT_MAJOR: ${{ needs.calculate.outputs.next_major }}
      NEXT_MINOR: ${{ needs.calculate.outputs.next_minor }}
      NEXT_PATCH: ${{ needs.calculate.outputs.next_patch }}
      TAG: ${{ needs.calculate.outputs.tag }}

    steps:
      - name: 다음 버전 COMMIT
        run: |
          git config --global user.name 'croquiscom-pim'
          git config --global user.email 'admin@croquis.com'
          AUTHOR="${{ github.event.sender.login }} <${{ github.event.sender.id }}+${{ github.event.sender.login }}@users.noreply.github.com>"
          GIT_NEXT_TAG="v${{ env.NEXT_MAJOR }}.${{ env.NEXT_MINOR }}.${{ env.NEXT_PATCH }}"
          echo "GIT_NEXT_TAG=$GIT_NEXT_TAG" >> $GITHUB_ENV
          VERSION=${{ env.GIT_NEXT_TAG }}
          echo "CUR VERSION ${{ env.TAG }} -> NEXT VERSION [$VERSION], COMMITTED BY [$AUTHOR]"
          git commit -m "$VERSION" --author "$AUTHOR"
          git push
          echo $VERSION

      - name: 다음 버전 RELEASE
        run: |
          VERSION=${{ env.GIT_NEXT_TAG }}
          git checkout --detach
          git commit --allow-empty -m "dist: v$VERSION"
          git tag v$VERSION
          git push --tags
          echo "NEXT VERSION [$VERSION] RELEASE COMPLETE"